(function(o,e){typeof exports=="object"&&typeof module<"u"?e(exports,require("vue"),require("web3")):typeof define=="function"&&define.amd?define(["exports","vue","web3"],e):(o=typeof globalThis<"u"?globalThis:o||self,e(o.DeviseWeb3Vue={},o.Vue,o.Web3))})(this,(function(o,e,l){"use strict";const r=(s,t)=>{const n=s.__vccOpts||s;for(const[i,c]of t)n[i]=c;return n},d=["disabled"],u={class:"button-content"},f={class:"button-text"},a=r(Object.assign({name:"ConnectWallet",props:{getNonce:{type:Function,default:null},onSign:{type:Function,default:null},onLogin:{type:Function,default:null}},data(){return{isConnecting:!1}},methods:{async connectWallet(){if(!this.isConnecting){this.isConnecting=!0;try{if(typeof window.ethereum>"u"){alert("MetaMask is not installed. Please install MetaMask to continue.");return}const t=(await window.ethereum.request({method:"eth_requestAccounts"}))[0],n=new l;this.getNonce().then(i=>{const{nonce:c,nonce_id:p}=i;ethereum.request({method:"personal_sign",params:[n.utils.fromUtf8(c),t]}).then(_=>{this.onSign({signature:_,nonce_id:p,address:t}).then(this.onLogin)})})}catch(s){console.error("Error connecting to MetaMask:",s)}finally{this.isConnecting=!1}}}}},{setup(s){return(t,n)=>(e.openBlock(),e.createElementBlock("button",{onClick:n[0]||(n[0]=(...i)=>t.connectWallet&&t.connectWallet(...i)),disabled:t.isConnecting,class:e.normalizeClass(["metamask-button",{connecting:t.isConnecting}])},[e.createElementVNode("div",u,[n[1]||(n[1]=e.createElementVNode("div",{class:"metamask-icon"},"ðŸ¦Š",-1)),e.createElementVNode("span",f,e.toDisplayString(t.isConnecting?"Connecting...":"Login with MetaMask"),1)]),n[2]||(n[2]=e.createElementVNode("div",{class:"shine-effect"},null,-1))],10,d))}}),[["__scopeId","data-v-768dc9a9"]]),m={install(s){s.component("ConnectWallet",a)}};o.ConnectWallet=a,o.default=m,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
